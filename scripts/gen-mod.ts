#!/usr/bin/env node
import { existsSync, mkdirSync, writeFileSync } from 'node:fs'
import { dirname, join, resolve } from 'node:path'
import { fileURLToPath, pathToFileURL } from 'node:url'

function toKebabCase(input: string): string {
  return input
    .replace(/([a-z\d])([A-Z])/g, '$1-$2')
    .replace(/[_\s]+/g, '-')
    .replace(/-+/g, '-')
    .toLowerCase()
    .replace(/[^a-z\d-]/g, '')
    .replace(/^-+|-+$/g, '')
}

function toPascalCase(input: string): string {
  return input
    .split(/[^a-zA-Z\d]+/)
    .filter(Boolean)
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
    .join('')
}

function assertName(value: unknown): asserts value is string {
  if (typeof value !== 'string' || !value.trim()) {
    console.error('Usage: npm run gen:mod -- <name>')
    process.exitCode = 1
    throw new Error('Missing mod name')
  }
}

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const rootDir = resolve(__dirname, '..')

const [, , rawName] = process.argv
assertName(rawName)

const modName = toKebabCase(rawName)
if (!modName) {
  console.error('Mod name must contain alphanumeric characters')
  process.exit(1)
}

const pascalName = toPascalCase(modName)
const targetDir = join(rootDir, 'src', 'game', 'mods', modName)
const targetFile = join(targetDir, `${modName}.mod.ts`)

if (existsSync(targetFile)) {
  console.error(`Mod already exists at ${pathToFileURL(targetFile).href}`)
  process.exit(1)
}

mkdirSync(targetDir, { recursive: true })

const modId = `mod.${modName}`
const contents = `// Auto-generated by scripts/gen-mod.ts\n` +
`import type { GameMod } from '../mod.types'\n\n` +
`const ${pascalName}Mod: GameMod = {\n` +
`  id: '${modId}',\n` +
`  kind: 'global',\n` +
`  tags: ['mutator'],\n` +
`  enable(ctx) {\n` +
`    ctx.registerSystem('update', () => {\n` +
`      // TODO: implement mod logic\n` +
`    })\n` +
`  }\n` +
`}\n\n` +
`export default ${pascalName}Mod\n`

writeFileSync(targetFile, contents)

console.log(`Created ${pathToFileURL(targetFile).href}`)
